/* Responsive.scss
 * For phone and tablet devices
 * ------------------------------------------------------------- */


// UP TO LANDSCAPE PHONE
// ---------------------

@media (max-width: 480px) {
  // Remove width from containers
  .container {
    width: auto;
    padding: 0 10px;
  }
  // Make all columns even
  [class*="span"] {
    float: none;
    display: block;
    width: auto;
    margin: 0;
  }
  // Resize modals
  .modal {
    width: auto;
    margin: 0;
  }

  // Remove the horizontal form styles
  .form-horizontal .control-group > label {
    float: none;
    width: auto;
    padding-top: 0;
    text-align: left;
  }
  // Move over all input controls and content
  .form-horizontal .controls {
    margin-left: 0;
  }
  // Move the options list down to align with labels
  .form-horizontal .control-list {
    padding-top: 0; // has to be padding because margin collaspes
  }
  // Move over buttons in .form-actions to align with .controls
  .form-horizontal .form-actions {
    padding-left: 0;
  }

}


// LANDSCAPE PHONE TO SMALL DESKTOP & PORTRAIT TABLET
// --------------------------------------------------

@media (min-width: 480px) and (max-width: 768px) {
  // Remove width from containers
  .container {
    width: auto;
    padding: 0 10px;
  }
  // Make all columns even
  [class*="span"] {
    float: none;
    display: block;
    width: auto;
    margin: 0;
  }
}


// PORTRAIT TABLET TO DEFAULT DESKTOP
// ----------------------------------

// Bring grid mixins to recalculate widths
@mixin responsive_columns-768-940($columnSpan: 1) {
  width: ($gridColumnWidth * $columnSpan) + ($gridGutterWidth * ($columnSpan - 1));
}
@mixin responsive_offset-768-940($columnOffset: 1) {
  margin-left: ($gridColumnWidth * $columnOffset) + ($gridGutterWidth * ($columnOffset - 1)) + $gridGutterWidth;
}

@media (min-width: 768px) and (max-width: 940px) {

  // Reset grid variables
  $gridColumns:       16;
  $gridColumnWidth:   44px;
  $gridGutterWidth:   20px;
  $siteWidth:         748px;

  // 16cols at 30px wide with 16px gutters
  .container {
    width: $siteWidth;
  }

  // Default columns
  @each $n in 1 2 3 4 5 6 7 8 9 10 11 12 {
    .span#{$n} { @include responsive_columns-768-940($n); }
  }

  // Offset column options
  @each $n in 1 2 3 4 5 6 7 8 9 10 11 12 {
    .offset#{$n} { @include responsive_offset-768-940($n); }
  }

}

/*
// LARGE DESKTOP & UP
// ------------------

@media (min-width: 1210px) {

  // Reset grid variables
  @gridColumns:       12;
  @gridColumnWidth:   70px;
  @gridGutterWidth:   30px;
  @siteWidth:         1170px;

  // Bring grid mixins to recalculate widths
  .columns(@columnSpan: 1) {
    width: (@gridColumnWidth * @columnSpan) + (@gridGutterWidth * (@columnSpan - 1));
  }
  .offset(@columnOffset: 1) {
    margin-left: (@gridColumnWidth * @columnOffset) + (@gridGutterWidth * (@columnOffset - 1)) + @gridGutterWidth;
  }

  .container {
    width: @siteWidth;
  }
  [class*="span"] {
    margin-left: @gridGutterWidth;
  }

  // Default columns
  .span1     { .columns(1); }
  .span2     { .columns(2); }
  .span3     { .columns(3); }
  .span4     { .columns(4); }
  .span5     { .columns(5); }
  .span6     { .columns(6); }
  .span7     { .columns(7); }
  .span8     { .columns(8); }
  .span9     { .columns(9); }
  .span10    { .columns(10); }
  .span11    { .columns(11); }
  .span12    { .columns(12); }

  // Offset column options
  .offset1   { .offset(1); }
  .offset2   { .offset(2); }
  .offset3   { .offset(3); }
  .offset4   { .offset(4); }
  .offset5   { .offset(5); }
  .offset6   { .offset(6); }
  .offset7   { .offset(7); }
  .offset8   { .offset(8); }
  .offset9   { .offset(9); }
  .offset10  { .offset(10); }
  .offset11  { .offset(11); }
  .offset12  { .offset(12); }

}
*/
